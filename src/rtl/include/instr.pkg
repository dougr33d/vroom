`ifndef __INSTR_PKG
`define __INSTR_PKG 

`include "verif.pkg"
`include "common.pkg"

package instr;
    localparam RV_REG_BITS      = 32;
    localparam RV_NUM_REGS      = 32;
    localparam RV_REG_ADDR_BITS = $clog2(RV_NUM_REGS);
    localparam RV_OPCODE_WIDTH  = 7;
    localparam RV_INSTR_WIDTH   = 32;
    localparam RV_INSTR_BYTES   = RV_INSTR_WIDTH/8;

    import verif::*;
    import common::*;

    typedef enum logic[RV_OPCODE_WIDTH-1:0] {
        RV_OP_LUI    = 7'b0110111,
        RV_OP_AUIPC  = 7'b0010111,
        RV_OP_JAL    = 7'b1101111,
        RV_OP_JALR   = 7'b1100111,
        RV_OP_BR     = 7'b1100011,
        RV_OP_LD     = 7'b0000011,
        RV_OP_ST     = 7'b0100011,
        RV_OP_ALU_I  = 7'b0010011,
        RV_OP_ALU_R  = 7'b0110011,
        RV_OP_FENCE  = 7'b0001111,
        RV_OP_MISC   = 7'b1110011
    } t_rv_opcode;

    typedef enum logic[2:0] {
        ALU_ADD  = 3'b000,
        ALU_SHL  = 3'b001,
        ALU_SLT  = 3'b010,
        ALU_SLTU = 3'b011,
        ALU_XOR  = 3'b100,
        ALU_SHR  = 3'b101,
        ALU_OR   = 3'b110,
        ALU_AND  = 3'b111
    } t_rv_alu_op_funct3;

    typedef logic[RV_REG_ADDR_BITS-1:0] t_rv_reg_addr;
    typedef logic[RV_REG_BITS-1:0]      t_rv_reg_data;

    // RISC-V Instruction descriptor formats

    typedef enum logic[2:0] {
        RV_FMT_R,
        RV_FMT_I,
        RV_FMT_S,
        RV_FMT_B,
        RV_FMT_U,
        RV_FMT_J
    } t_rv_instr_format;

    typedef struct packed {
        logic[6:0]     funct7;
        t_rv_reg_addr  rs2;
        t_rv_reg_addr  rs1;
        logic[2:0]     funct3;
        t_rv_reg_addr  rd;
    } t_instr_R_descr;

    typedef struct packed {
        logic[11:0] imm_11_0;
        t_rv_reg_addr    rs1;
        logic[2:0]  funct3;
        t_rv_reg_addr    rd;
    } t_instr_I_descr;

    typedef struct packed {
        logic[11:5] imm_11_5;
        t_rv_reg_addr    rs2;
        t_rv_reg_addr    rs1;
        logic[2:0]  funct3;
        logic[4:0]  imm_4_0;
    } t_instr_S_descr;

    typedef struct packed {
        logic[12:12] imm_12;
        logic[10:5]  imm_10_5;
        t_rv_reg_addr     rs2;
        t_rv_reg_addr     rs1;
        logic[2:0]   funct3;
        logic[4:1]   imm_4_1;
        logic[11:11] imm_11;
    } t_instr_B_descr;

    typedef struct packed {
        logic[31:12] imm_31_12;
        t_rv_reg_addr    rd;
    } t_instr_U_descr;

    typedef struct packed {
        logic[20:20] imm_20;
        logic[10:1]  imm_10_1;
        logic[11:11] imm_11;
        logic[19:12] imm_19_12;
        t_rv_reg_addr    rd;
    } t_instr_J_descr;

    typedef union packed {
        t_instr_R_descr  R;
        t_instr_I_descr  I;
        t_instr_S_descr  S;
        t_instr_B_descr  B;
        t_instr_U_descr  U;
        t_instr_J_descr  J;
    } t_instr_descr;

    // RISC-V Instruction formats

    typedef struct packed {
        t_instr_descr d;
        t_rv_opcode   opcode;
    } t_rv_instr;

    typedef struct packed {
        `SIMID_STRUCT
        t_paddr    pc;
        t_rv_instr instr;
    } t_instr_pkt;

    // Expanded uop format

    typedef enum logic[1:0] {
        SZ_INV = 2'b00,
        SZ_1B  = 2'b01,
        SZ_2B  = 2'b10,
        SZ_4B  = 2'b11
    } t_size;

    typedef enum logic[2:0] {
        OP_INVD,
        OP_ZERO,
        OP_IMM,
        OP_REG,
        OP_MEM
    } t_optype;

    `ifdef SIMULATION
    function string describe_instr(t_instr_pkt inst);
        describe_instr = $sformatf("SIMID:%s opcode:%s", format_simid(inst.SIMID), inst.instr.opcode.name());
    endfunction
    `endif

endpackage

`endif // __INSTR_PKG 
