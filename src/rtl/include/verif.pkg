`ifndef __VERIF_PKG
`define __VERIF_PKG

`include "instr.pkg"

package verif;

    `ifdef SIMULATION

        typedef enum logic[2:0] {
            FETCH,
            UOP
        } t_simid_spawn_point;

        typedef struct packed {
            t_simid_spawn_point spawn;
            int                 record;
        } t_simid_key;

        typedef struct packed {
            int         fid;
            logic[63:0] pc;
        } t_simid_txid;

        typedef struct packed {
            t_simid_txid txid;
            t_simid_key pid;
            t_simid_key lid;
        } t_simid;

        `define SIMID_STRUCT t_simid SIMID;

        function string format_simid(t_simid simid);
            return $sformatf("%h,%h,%h", simid.txid, simid.pid, simid.lid);
        endfunction

        `define SIMID_CREATE_RHS(SPAWN,FID,PC) \
            '{txid: '{fid:FID, pc:PC}, pid: t_simid_key'('0), lid: t_simid_key'('0)}

        `define SIMID_SPAWN_RHS(PARENT,SPAWN,RECORD) \
            '{fid:PARENT.fid, pc:PARENT.pc, txid: PARENT.txid, pid: PARENT.lid, lid: '{spawn_point:SPAWN, record:RECORD}}

        `define SIMID_SPAWN_CNTR(NAME,SPAWN_NOW,CLK,PARENT,SPAWN) \
            int __simid_cntr_``NAME``; \
            initial __simid_cntr_``NAME`` = '0; \
            always_ff @(posedge CLK) if (SPAWN_NOW) __simid_cntr_``NAME`` <= __simid_cntr_``NAME`` + 1; \
            t_simid NAME; \
            assign NAME = `SIMID_SPAWN_RHS(PARENT,SPAWN,__simid_cntr_``NAME``);

    `else // SIMULATION

        `define SIMID_STRUCT

    `endif

endpackage

`endif // __VERIF_PKG
