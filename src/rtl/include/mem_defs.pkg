`ifndef __MEM_DEFS_PKG
`define __MEM_DEFS_PKG

`include "verif.pkg"
`include "common.pkg"

package mem_defs;
    import common::*;
    import instr::*;
    import verif::*;

    localparam NUM_MM_STAGES = 9;

    localparam MM0 = 0;
    localparam MM1 = 1;
    localparam MM2 = 2;
    localparam MM3 = 3;
    localparam MM4 = 4;
    localparam MM5 = 5;
    localparam MM6 = 6;
    localparam MM7 = 7;
    localparam MM8 = 8;
    localparam MM9 = 9;

    typedef enum logic[1:0] {
        MEM_LOAD,
        MEM_STORE,
        MEM_FILL
    } t_mem_arb_type;

    typedef enum logic {
        MEM_ST_INITIAL,
        MEM_ST_FINAL
    } t_mem_st_phase;

    typedef union packed {
        t_mem_st_phase st;
    } t_mem_phase;

    typedef struct packed {
        `SIMID_STRUCT
        t_mem_id       id;
        t_mem_arb_type arb_type;
        t_cl           arb_data;
        logic[CL_SZ_BYTES-1:0] byte_en;
        t_l1_way       arb_way;
        t_stq_id       yost;
        t_vaddr        addr;
        t_rob_id       robid;
        t_prf_id       pdst;
        t_mem_phase    phase;
        logic          nukeable;
    } t_mempipe_arb;

    typedef struct packed {
        `SIMID_STRUCT
        t_rob_id      robid;
        t_size        osize;
    } t_stq_static;

    typedef struct packed {
        `SIMID_STRUCT
        /* t_vaddr  vaddr; */
        t_rob_id robid;
        /* t_prf_id pdst; */
    } t_ldq_static;

    typedef struct packed {
        `SIMID_STRUCT
        t_vaddr        paddr;
        t_mem_id       alloc_id;
        t_mem_arb_type alloc_type;
    } t_flq_static;

    typedef struct packed {
        logic complete;
        logic recycle;
    } t_mempipe_action;

endpackage

`endif // __MEM_DEFS_PKG
