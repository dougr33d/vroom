`ifndef __COMMON_PKG
`define __COMMON_PKG

`include "verif.pkg"

package common;
    localparam PA_SZ         = 64;
    localparam VA_SZ         = 64;
    localparam CL_SZ         = 512;
    localparam CL_SZ_BYTES   = CL_SZ/8;
    localparam CL_SZ_HWORDS  = CL_SZ_BYTES/2;
    localparam CL_SZ_WORDS   = CL_SZ_HWORDS/2;
    localparam CL_SZ_DWORDS  = CL_SZ_WORDS/2;
    localparam CL_ADDR_SZ    = $clog2(CL_SZ_BYTES);

    localparam NUM_SOURCES = 2;
    localparam NUM_COMPLETES = 2;

    localparam SRC1 = 0;
    localparam SRC2 = 1;

    localparam NUM_DISP_PORTS     = 2;
    localparam DISP_PORT_EINT     = 0;
    localparam DISP_PORT_MEM      = 1;

    localparam FE_FB_NUM_SETS     = 4;
    localparam FE_FB_NUM_SETS_LG2 = $clog2(FE_FB_NUM_SETS);
    localparam FE_FB_SET_BITS     = FE_FB_NUM_SETS_LG2;
    localparam FE_FB_SET_LSB      = CL_ADDR_SZ;
    localparam FE_FB_SET_MSB      = FE_FB_SET_LSB + FE_FB_SET_BITS - 1;

    localparam FE_FB_NUM_ENTS     = 4;
    localparam FE_FB_NUM_ENTS_LG2 = $clog2(FE_FB_NUM_ENTS);

    typedef logic[PA_SZ-1:0]    t_paddr;
    typedef logic[VA_SZ-1:0]    t_vaddr;

    //////////////////////////////
    // ROB Defines ///////////////
    //////////////////////////////

    localparam RB_NUM_ENTS = 8;
    localparam RB_NUM_ENTS_LG2 = $clog2(RB_NUM_ENTS);
    typedef logic[RB_NUM_ENTS_LG2-1:0] t_rob_ptr;
    typedef struct packed {
       logic     wrap;
       t_rob_ptr idx;
    } t_rob_id;

    //////////////////////////////
    // Branch recovery ///////////
    //////////////////////////////

    typedef struct packed {
        logic    valid;
        t_rob_id robid;
        t_paddr  target_addr;
    } t_br_mispred_pkt;

    typedef enum logic {
        NUKE_BR_MISPRED,
        NUKE_EXCEPTION
    } t_nuke_type;

    typedef struct packed {
        logic       valid;
        t_nuke_type nuke_type;
    } t_nuke_pkt;

    //////////////////////////////
    // PRF Defines ///////////////
    //////////////////////////////

    localparam IPRF_NUM_WRITES     = 2;
    localparam IPRF_NUM_READS      = 2;
    localparam IPRF_NUM_MAP_READS  = 2;

    localparam IPRF_NUM_ENTS = 64;
    localparam IPRF_NUM_ENTS_LG2 = $clog2(IPRF_NUM_ENTS);

    // MAX of IPRF, VPRF, etc...
    localparam PRF_NUM_ENTS = IPRF_NUM_ENTS;
    localparam PRF_NUM_ENTS_LG2 = $clog2(PRF_NUM_ENTS);

    typedef logic[PRF_NUM_ENTS_LG2-1:0] t_prf_addr;
    typedef enum logic {
        IPRF=0,
        VPRF=1
    } t_prf_type;
    typedef struct packed {
        t_prf_type ptype;
        t_prf_addr idx;
    } t_prf_id;

    function automatic string f_describe_prf(common::t_prf_id prf_id);
        f_describe_prf = $sformatf("%s.0x%02h", prf_id.ptype.name, prf_id.idx);
    endfunction

    //////////////////////////////
    // MEM defines ///////////////
    //////////////////////////////

    localparam L1_NUM_WAYS = 8;
    localparam L1_NUM_WAYS_LG2 = $clog2(L1_NUM_WAYS);

    localparam L1_NUM_SETS = 32;
    localparam L1_NUM_SETS_LG2 = $clog2(L1_NUM_SETS);

    localparam L1_TAG_SIZE = VA_SZ - CL_ADDR_SZ - L1_NUM_SETS_LG2;

    typedef logic[L1_NUM_WAYS_LG2-1:0] t_l1_way;
    typedef logic[L1_NUM_SETS_LG2-1:0] t_l1_set_addr;
    typedef logic[L1_TAG_SIZE-1:0]     t_l1_tag;

    localparam L1_OFFSET_LO = 0;
    localparam L1_OFFSET_HI = L1_OFFSET_LO + CL_ADDR_SZ - 1;

    localparam L1_SET_LO = L1_OFFSET_HI + 1;
    localparam L1_SET_HI = L1_SET_LO + L1_NUM_SETS_LG2 - 1;

    localparam L1_TAG_LO = L1_SET_HI + 1;
    localparam L1_TAG_HI = VA_SZ-1;

    localparam LDQ_NUM_ENTRIES = 8;
    localparam LDQ_NUM_ENTRIES_LG2 = $clog2(LDQ_NUM_ENTRIES);

    localparam STQ_NUM_ENTRIES = 8;
    localparam STQ_NUM_ENTRIES_LG2 = $clog2(STQ_NUM_ENTRIES);

    localparam FLQ_NUM_ENTRIES = 8;
    localparam FLQ_NUM_ENTRIES_LG2 = $clog2(FLQ_NUM_ENTRIES);

    localparam MEM_ID_WIDTH = LDQ_NUM_ENTRIES_LG2; // FIXME: should be MAX of all IDs

    typedef logic[LDQ_NUM_ENTRIES_LG2-1:0] t_ldq_id;
    typedef logic[STQ_NUM_ENTRIES_LG2-1:0] t_stq_id;
    typedef logic[FLQ_NUM_ENTRIES_LG2-1:0] t_flq_id;
    typedef logic[MEM_ID_WIDTH-1:0] t_mem_id;

    //////////////////////////////
    // Miscellanea ///////////////
    //////////////////////////////

    typedef logic[ 7:0] t_byte;
    typedef logic[15:0] t_hword;
    typedef logic[31:0] t_word;
    typedef logic[63:0] t_dword;

    typedef union packed {
        t_byte [CL_SZ_BYTES-1:0]  B;
        t_hword[CL_SZ_HWORDS-1:0] H;
        t_word [CL_SZ_WORDS-1:0]  W;
        t_word [CL_SZ_DWORDS-1:0] D;
        logic[CL_SZ-1:0]       flat;
    } t_cl;

    typedef logic[CL_ADDR_SZ-1:0] t_cl_offset;

    function t_paddr get_cl_addr(t_paddr pa);
        get_cl_addr                 = pa;
        get_cl_addr[CL_ADDR_SZ-1:0] = '0;
    endfunction

    function logic[CL_ADDR_SZ-1:0] get_cl_offset(t_paddr pa);
        get_cl_offset = pa[CL_ADDR_SZ-1:0];;
    endfunction

    function logic cl_match(t_paddr a, t_paddr b);
        cl_match = get_cl_addr(a) == get_cl_addr(b);
    endfunction

    typedef enum logic[1:0] {
        MESI_I = 0,
        MESI_S = 1,
        MESI_E = 2,
        MESI_M = 3
    } t_mesi;

endpackage

`endif // __COMMON_PKG
