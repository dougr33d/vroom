`ifndef __ASM_PKG
`define __ASM_PKG

`include "common.pkg"

package asm;
    import instr::*;
    import common::*;

    // I-format instructions

    function t_word __rvI(t_rv_opcode op, t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0, logic[2:0] funct3);
        __rvI = (t_word'(op      ) <<  0)
              | (t_word'(rd      ) <<  7)
              | (t_word'(funct3  ) << 12)
              | (t_word'(rs1     ) << 15)
              | (t_word'(imm_11_0) << 20);
    endfunction

    function t_word rvADDI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_ADD ); endfunction
    function t_word rvANDI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_AND ); endfunction
    function t_word rvORI  (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_OR  ); endfunction
    function t_word rvXORI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_XOR ); endfunction
    function t_word rvSLLI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[5:0]  shamt   ); return __rvI(RV_OP_ALU0_I, rd, rs1, {6'b000000, shamt[5:0]},  ALU_SHL ); endfunction
    function t_word rvSRLI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[5:0]  shamt   ); return __rvI(RV_OP_ALU0_I, rd, rs1, {6'b000000, shamt[5:0]},  ALU_SHR ); endfunction
    function t_word rvSRAI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[5:0]  shamt   ); return __rvI(RV_OP_ALU0_I, rd, rs1, {6'b010000, shamt[5:0]},  ALU_SHR ); endfunction
    function t_word rvSLTI (t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_SLT ); endfunction
    function t_word rvSLTIU(t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU0_I, rd, rs1, imm_11_0,                 ALU_SLTU); endfunction
    function t_word rvADDIW(t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[11:0] imm_11_0); return __rvI(RV_OP_ALU1_I, rd, rs1, imm_11_0,                 ALU_ADD ); endfunction
    function t_word rvSLLIW(t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[4:0]  shamt   ); return __rvI(RV_OP_ALU1_I, rd, rs1, {7'b0000000, shamt[4:0]}, ALU_SHL ); endfunction
    function t_word rvSRLIW(t_rv_reg_addr rd, t_rv_reg_addr rs1, logic[4:0]  shamt   ); return __rvI(RV_OP_ALU1_I, rd, rs1, {7'b0000000, shamt[4:0]}, ALU_SHR ); endfunction

    function t_word rvECALL(                                                         ); return __rvI(RV_OP_SYSTEM, '0, '0 , 12'b000000000000,         '0      ); endfunction
    function t_word rvEBREAK(                                                        ); return __rvI(RV_OP_SYSTEM, '0, '0 , 12'b000000000001,         '0      ); endfunction


    // R-format instructions

    function t_word __rvR(t_rv_opcode op, t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[2:0] funct3, logic[6:0] funct7);
        __rvR = (t_word'(op      ) <<  0)
              | (t_word'(rd      ) <<  7)
              | (t_word'(funct3  ) << 12)
              | (t_word'(rs1     ) << 15)
              | (t_word'(rs2     ) << 20)
              | (t_word'(funct7  ) << 25);
    endfunction

    function t_word rvADD (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_ADD,  7'b0000000); endfunction
    function t_word rvSUB (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_ADD,  7'b0100000); endfunction
    function t_word rvAND (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_AND,  7'b0000000); endfunction
    function t_word rvOR  (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_OR ,  7'b0000000); endfunction
    function t_word rvXOR (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_XOR,  7'b0000000); endfunction
    function t_word rvSLL (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_SHL,  7'b0000000); endfunction
    function t_word rvSRL (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_SHR,  7'b0000000); endfunction
    function t_word rvSRA (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_SHR,  7'b0100000); endfunction
    function t_word rvSLT (t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_SLT,  7'b0000000); endfunction
    function t_word rvSLTU(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU0_R, rd, rs1, rs2, ALU_SLTU, 7'b0000000); endfunction
    function t_word rvADDW(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU1_R, rd, rs1, rs2, ALU_ADD,  7'b0000000); endfunction
    function t_word rvSUBW(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU1_R, rd, rs1, rs2, ALU_ADD,  7'b0100000); endfunction
    function t_word rvSLLW(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU1_R, rd, rs1, rs2, ALU_SHL,  7'b0000000); endfunction
    function t_word rvSRLW(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU1_R, rd, rs1, rs2, ALU_SHR,  7'b0000000); endfunction
    function t_word rvSRAW(t_rv_reg_addr rd, t_rv_reg_addr rs1, t_rv_reg_addr rs2); return __rvR(RV_OP_ALU1_R, rd, rs1, rs2, ALU_SHR,  7'b0100000); endfunction

    // B-format instructions

    function t_word __rvB(t_rv_opcode op, t_rv_br_op_funct3 cond, t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13);
        __rvB = (t_word'(op            ) <<  0)
              | (t_word'(imm13[11]     ) <<  7)
              | (t_word'(imm13[4:1]    ) <<  8)
              | (t_word'(cond          ) << 12)
              | (t_word'(rs1           ) << 15)
              | (t_word'(rs2           ) << 20)
              | (t_word'(imm13[10:5]   ) << 25)
              | (t_word'(imm13[12]     ) << 31);
    endfunction

    function t_word rvBEQ (t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BEQ , rs1, rs2, imm13); endfunction
    function t_word rvBNE (t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BNE , rs1, rs2, imm13); endfunction
    function t_word rvBLT (t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BLT , rs1, rs2, imm13); endfunction
    function t_word rvBGE (t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BEQ , rs1, rs2, imm13); endfunction
    function t_word rvBLTU(t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BLTU, rs1, rs2, imm13); endfunction
    function t_word rvBGEU(t_rv_reg_addr rs1, t_rv_reg_addr rs2, logic[12:0] imm13); return __rvB(RV_OP_BR, RV_BR_BGEU, rs1, rs2, imm13); endfunction

endpackage

`endif // __ASM_PKG
