`ifndef __CACHE_SIM_SV
`define __CACHE_SIM_SV

`include "instr.pkg"
`include "asm.pkg"
`include "mem_common.pkg"
`include "vroom_macros.sv"

package cache_sim;
    import instr::*, asm::*, mem_common::*, common::*;

    ////////////////////////
    // Data getters ////////
    ////////////////////////

`define L2MEM top.core.l2.MEMORY

function automatic logic[7:0] f_rd_l2data_byte(t_paddr byte_addr);
    f_rd_l2data_byte = 8'hEE;
    if(top.core.l2.MEMORY.exists(byte_addr) != 0) begin
        f_rd_l2data_byte = top.core.l2.MEMORY[byte_addr];
    end
endfunction

function automatic t_word f_rd_l2data_word(t_paddr byte_addr);
    logic[3:0][7:0] w;
    w[0] = f_rd_l2data_byte(byte_addr + 0);
    w[1] = f_rd_l2data_byte(byte_addr + 1);
    w[2] = f_rd_l2data_byte(byte_addr + 2);
    w[3] = f_rd_l2data_byte(byte_addr + 3);
    f_rd_l2data_word = t_word'(w);
endfunction

function automatic t_cl f_rd_l2data_cl(t_paddr byte_addr);
    for (t_paddr i=0; i<16; i++) begin
        f_rd_l2data_cl.W[i] = f_rd_l2data_word(byte_addr + i*4);
    end
endfunction

    ////////////////////////
    // Data putters ////////
    ////////////////////////

task f_wr_l2data_byte_blkng(t_byte b, t_paddr byte_addr);
    top.core.l2.MEMORY[byte_addr] <= b;
endtask

function automatic void f_wr_l2data_byte(t_byte b, t_paddr byte_addr);
    top.core.l2.MEMORY[byte_addr] = b;
endfunction

function automatic void f_wr_l2data_word(t_word w, t_paddr byte_addr);
    $display("Preloading %h -> %h", byte_addr, w);
    if (byte_addr[1:0] != 0) begin
        $error("preload_l2_word with misaligned addr");
    end
    for (logic[2:0] b=0; b<4; b++) begin
        f_wr_l2data_byte(w[8*b +: 8], byte_addr + t_paddr'(b));
    end
endfunction

function automatic void f_wr_l2data_cl(t_cl c, t_paddr byte_addr);
    if (byte_addr[5:0] != 0) begin
        $error("preload_l2_cl with misaligned addr");
    end
    for (t_paddr b=0; b<64; b++) begin
        f_wr_l2data_byte(c.B[b], byte_addr + b);
    end
endfunction

    ////////////////////////
    // Display helpers /////
    ////////////////////////

function automatic string f_format_cl_data(t_cl data);
    f_format_cl_data = $sformatf("%016h %016h %016h %016h  %016h %016h %016h %016h",
            {data.W[15], data.W[14]},
            {data.W[13], data.W[12]},
            {data.W[11], data.W[10]},
            {data.W[ 9], data.W[ 8]},
            {data.W[ 7], data.W[ 6]},
            {data.W[ 5], data.W[ 4]},
            {data.W[ 3], data.W[ 2]},
            {data.W[ 1], data.W[ 0]});
endfunction

    ////////////////////////
    // CL preloading ///////
    ////////////////////////

function automatic void f_preload_l2_cl(t_cl c, t_paddr byte_addr, logic display);
    if (byte_addr[5:0] != 0) begin
        $error("f_preload_l2_cl with misaligned addr");
    end

    for (t_paddr b=0; b<64; b++) begin
        f_wr_l2data_byte(c.B[b], byte_addr + b);
    end

    if (display) begin
        `MEMLOG(("unit:PRELOAD pa:%08h / %s ",
            byte_addr,
            f_format_cl_data(f_rd_l2data_cl(byte_addr))))
    end
endfunction

    /* verilator lint_off UNDRIVEN */
function automatic void f_dump_whole_l2();
    t_paddr key;
    t_paddr key_cl;
    logic cache_lines [t_paddr];

    `L2MEM.first(key);
    do begin
        key_cl = key & ~(t_paddr'(64'h3F));
        if (cache_lines.exists(key_cl) == 0) begin
            cache_lines[key_cl] = 1'b1;
            `MEMLOG(("unit:PRELOAD pa:%08h / %s ",
                key_cl,
                f_format_cl_data(f_rd_l2data_cl(key_cl))))
            end
        end
    while(`L2MEM.next(key) != 0);
endfunction
    /* verilator lint_on UNDRIVEN */

endpackage

`endif // __CACHE_SIM_SV


